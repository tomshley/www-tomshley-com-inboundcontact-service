# Journal
pekko.persistence.journal.plugin = "pekko.persistence.r2dbc.journal"

# Snapshot
pekko.persistence.snapshot-store.plugin = "pekko.persistence.r2dbc.snapshot"

pekko.projection.r2dbc {
}

pekko.persistence.r2dbc {

  # postgres or yugabyte
  dialect = "yugabyte"

  # set this to your database kafka if applicable, empty by default
  schema = ""

  connection-factory {
    driver = "postgresql"

    # the connection can be configured with a url, eg: "r2dbc:postgresql://<host>:5432/<database>"
    url = ""
    url = ${?YUGABYTEDB_CONNECTION_STRING}

    # The connection options to be used. Ignored if 'url' is non-empty
    # For using DNS resolution: host = "yb-tservers.www-tomshley-com-data-yb-1.svc.cluster.local"
    # For using K8s resolution: host = "yb-tservers.www-tomshley-com-data-yb-1"
    host = "localhost"
    host = ${?YUGABYTEDB_HOST}
    port = 5433
    port = ${?YUGABYTEDB_PORT}
    database = "yugabyte"
    database = ${?YUGABYTEDB_DB}
    user = "yugabyte"
    user = ${?YUGABYTEDB_USER}
    password = "yugabyte"
    password = ${?YUGABYTEDB_PASSWORD}

    ssl {
      enabled = true
      # See PostgresqlConnectionFactoryProvider.SSL_MODE
      # Possible values:
      #  allow - encryption if the app insists on it
      #  prefer - encryption if the app supports it
      #  require - encryption enabled and required, but trust network to connect to the right app
      #  verify-ca - encryption enabled and required, and verify app certificate
      #  verify-full - encryption enabled and required, and verify app certificate and hostname
      #  tunnel - use a SSL tunnel instead of following Postgres SSL handshake protocol
      mode = "verify-full"

      # Can point to either a resource within the classpath or a file.
      root-cert = "yugabyte.crt"
    }

    # Initial pool size.
    initial-size = 5
    # Maximum pool size.
    max-size = 20
    # Maximum time to create a new connection.
    connect-timeout = 3 seconds
    # Maximum time to acquire connection from pool.
    acquire-timeout = 5 seconds
    # Number of retries if the connection acquisition attempt fails.
    # In the case the database app was restarted all connections in the pool will
    # be invalid. To recover from that without failed acquire you can use the same number
    # of retries as max-size of the pool
    acquire-retry = 1

    # Maximum idle time of the connection in the pool.
    # Background eviction interval of idle connections is derived from this property
    # and max-life-time.
    max-idle-time = 30 minutes

    # Maximum lifetime of the connection in the pool.
    # Background eviction interval of connections is derived from this property
    # and max-idle-time.
    max-life-time = 60 minutes

    # Configures the statement cache size.
    # 0 means no cache, negative values will select an unbounded cache
    # a positive value will configure a bounded cache with the passed size.
    statement-cache-size = 5000

    # Validate the connection when acquired with this SQL.
    # Enabling this has some performance overhead.
    # A fast query for Postgres is "SELECT 1"
    validation-query = ""
  }

  # If database timestamp is guaranteed to not move backwards for two subsequent
  # updates of the same persistenceId there might be a performance gain to
  # set this to `on`. Note that many databases use the system clock and that can
  # move backwards when the system clock is adjusted.
  db-timestamp-monotonic-increasing = off

  # Enable this for testing or workaround of https://github.com/yugabyte/yugabyte-db/issues/10995
  # FIXME: This property will be removed when the Yugabyte issue has been resolved.
  use-app-timestamp = off

  # Logs database calls that take longer than this duration at INFO level.
  # Set to "off" to disable this logging.
  # Set to 0 to log all calls.
  log-db-calls-exceeding = 300 ms

}
